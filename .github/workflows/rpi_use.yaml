name: Use built image
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  build:
    name: Use built image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-sw: ["3.11.1"]
        arch: [armv7l]
        include:
# arm1176 is the CPU of BCM2835 which is the SOC of first generation RaspberryPi and RaspberryPi Zero.
        - arch: armv7l
          cpu: cortex-a7
          # base_image: raspios_lite:latest
          base_image: https://github.com/gpongelli/arm-runner-python/releases/download/1.2.1/1.2.1-armv7l-py311.img.xz
    steps:
      - uses: actions/checkout@v3

      - id: get_short_sha
        uses: actions/github-script@v6.4.0
        with:
          script: |
            const short_sha = '${{ github.sha }}'.substr(0, 7)
            core.setOutput('short_sha', short_sha)

      - name: print sha
        run: |
          echo ${GITHUB_SHA}
          echo ${{ steps.get_short_sha.outputs.short_sha }}

      - name: Use release image
        uses: pguyot/arm-runner-action@v2
        id: arm_runner_install
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          cpu_info: ${{ matrix.cpu_info }}
          shell: bash -l
          copy_repository_path: /opt/repo
          copy_artifact_path: dist
          image_additional_mb: 4096
          exit_on_fail: false
          commands: |
            whoami
            echo $PATH
            echo $LD_LIBRARY_PATH
            export CRYPTOGRAPHY_DONT_BUILD_RUST=1
            ls -l /opt/build_python/installed/bin
            ls -l /opt/build_python/installed/lib
            ls -l $(which python3)
            ls -l $(which cc)
            ls -l $(which gcc)
            cat /etc/profile.d/env.sh
            cat /etc/profile.d/rust.sh
            ls -lR /opt/repo
            echo "---path---"
            echo $PATH
            echo "---ld lib path---"
            echo $LD_LIBRARY_PATH
            echo "---cargo home---"
            echo $CARGO_HOME
            echo "---rustup home---"
            echo $RUSTUP_HOME
            find / -iname Cargo.toml
            tree -apuC $CARGO_HOME
            sudo apt-get install build-essential libssl-dev libffi-dev pkg-config gcc
            rustup update stable
            cargo init
            cargo clean
            cargo update
            find / -iname Cargo.toml
            find / -iname rustc
            python3 --version
            rustc --version
            cargo --version
            python3 --version >> /opt/repo/dist/ver.txt 
            pip3 config -v list
            python3 -m pip install --upgrade pip
            export CARGO_NET_GIT_FETCH_WITH_CLI=true
            export CARGO_LOG=trace
            cargo fetch
            mkdir -p /opt/poetry
            ls -l /opt
            ls -lR /opt/repo
            rm -rdf /opt/repo/poetry-*.log
            export POETRY_HOME=/opt/poetry
            python3 /opt/repo/test-action/install-poetry.py --version 1.3.0
            cat $(find /opt/repo/poetry-*.log)
            $POETRY_HOME/bin/poetry --version
            rm -rdf /opt/pipx/logs/*.log
            $POETRY_HOME/bin/poetry add cryptography
            cat $(find /opt/pipx/logs/*.log)

#            RUSTC_LOG=trace cargo run --verbose
#            cat /etc/profile.d/env.sh
#            cat /etc/profile.d/rust.sh
#            source /etc/profile.d/env.sh
#            source /etc/profile.d/rust.sh

      - name: show out files
        run: |
          ls -l .
          ls -l ./dist
